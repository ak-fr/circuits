  o  LEF: </home/ahmed/coriolis-2.x/release/install/lib/python3/dist-packages/pdks/ihpsg13g2/libs.ref/sg13g2_stdcell/lef/sg13g2_tech.lef>
  o  LEF: </home/ahmed/coriolis-2.x/release/install/lib/python3/dist-packages/pdks/ihpsg13g2/libs.ref/sg13g2_io/lef/sg13g2_io.lef>
     o sg13g2_Corner 180um 180um LEF.sg13g2_ioSite     o sg13g2_Filler200 1um 180um LEF.sg13g2_ioSite     o sg13g2_Filler400 2um 180um LEF.sg13g2_ioSite     o sg13g2_Filler1000 5um 180um LEF.sg13g2_ioSite     o sg13g2_Filler2000 10um 180um LEF.sg13g2_ioSite     o sg13g2_Filler4000 20um 180um LEF.sg13g2_ioSite     o sg13g2_Filler10000 50um 180um LEF.sg13g2_ioSite     o sg13g2_IOPadIn 80um 180um LEF.sg13g2_ioSite     o sg13g2_IOPadOut4mA 80um 180um LEF.sg13g2_ioSite     o sg13g2_IOPadOut16mA 80um 180um LEF.sg13g2_ioSite     o sg13g2_IOPadOut30mA 80um 180um LEF.sg13g2_ioSite     o sg13g2_IOPadTriOut4mA 80um 180um LEF.sg13g2_ioSite     o sg13g2_IOPadTriOut16mA 80um 180um LEF.sg13g2_ioSite     o sg13g2_IOPadTriOut30mA 80um 180um LEF.sg13g2_ioSite     o sg13g2_IOPadInOut4mA 80um 180um LEF.sg13g2_ioSite     o sg13g2_IOPadInOut16mA 80um 180um LEF.sg13g2_ioSite     o sg13g2_IOPadInOut30mA 80um 180um LEF.sg13g2_ioSite     o sg13g2_IOPadAnalog 80um 180um LEF.sg13g2_ioSite     o sg13g2_IOPadIOVss 80um 180um LEF.sg13g2_ioSite     o sg13g2_IOPadIOVdd 80um 180um LEF.sg13g2_ioSite     o sg13g2_IOPadVss 80um 180um LEF.sg13g2_ioSite     o sg13g2_IOPadVdd 80um 180um LEF.sg13g2_ioSite
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.46 (git sha1 0.46, g++ 11.2.0-19ubuntu1 -fPIC -O3)

-- Executing script file `rot.ys' --

1. Executing Verilog-2005 frontend: rot.v
Parsing SystemVerilog input from `rot.v' to AST representation.
Generating RTLIL representation for module `\stage'.
Generating RTLIL representation for module `\rot'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \rot
Used module:     \stage
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 7

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 7
Generating RTLIL representation for module `$paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 6

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 6
Generating RTLIL representation for module `$paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 5

2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 5
Generating RTLIL representation for module `$paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 4

2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 4
Generating RTLIL representation for module `$paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 3

2.6. Executing AST frontend in derive mode using pre-parsed AST for module `\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 3
Generating RTLIL representation for module `$paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 2

2.7. Executing AST frontend in derive mode using pre-parsed AST for module `\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 2
Generating RTLIL representation for module `$paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 1

2.8. Executing AST frontend in derive mode using pre-parsed AST for module `\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 1
Generating RTLIL representation for module `$paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 0

2.9. Executing AST frontend in derive mode using pre-parsed AST for module `\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 0
Generating RTLIL representation for module `$paramod$a4c137564271734846086b8aaca9819e42345e65\stage'.
Reprocessing module rot because instantiated module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage has become available.
Generating RTLIL representation for module `\rot'.

2.10. Analyzing design hierarchy..
Top module:  \rot
Used module:     \stage
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 7
Found cached RTLIL representation for module `$paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 6
Found cached RTLIL representation for module `$paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 5
Found cached RTLIL representation for module `$paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 4
Found cached RTLIL representation for module `$paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 3
Found cached RTLIL representation for module `$paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 2
Found cached RTLIL representation for module `$paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 1
Found cached RTLIL representation for module `$paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage'.
Parameter \N = 256
Parameter \log2_N = 8
Parameter \stage_number = 0
Found cached RTLIL representation for module `$paramod$a4c137564271734846086b8aaca9819e42345e65\stage'.

2.11. Analyzing design hierarchy..
Top module:  \rot
Used module:     $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage
Used module:     $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage
Used module:     $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage
Used module:     $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage
Used module:     $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage
Used module:     $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage
Used module:     $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage
Used module:     $paramod$a4c137564271734846086b8aaca9819e42345e65\stage

2.12. Analyzing design hierarchy..
Top module:  \rot
Used module:     $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage
Used module:     $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage
Used module:     $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage
Used module:     $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage
Used module:     $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage
Used module:     $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage
Used module:     $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage
Used module:     $paramod$a4c137564271734846086b8aaca9819e42345e65\stage
Removing unused module `\stage'.
Removed 1 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \rot
Used module:     $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage
Used module:     $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage
Used module:     $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage
Used module:     $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage
Used module:     $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage
Used module:     $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage
Used module:     $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage
Used module:     $paramod$a4c137564271734846086b8aaca9819e42345e65\stage

3.1.2. Analyzing design hierarchy..
Top module:  \rot
Used module:     $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage
Used module:     $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage
Used module:     $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage
Used module:     $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage
Used module:     $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage
Used module:     $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage
Used module:     $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage
Used module:     $paramod$a4c137564271734846086b8aaca9819e42345e65\stage
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 8 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\rot.$proc$rot.v:0$2104'.

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\rot.\middle[0]' from process `\rot.$proc$rot.v:0$2104'.
No latch inferred for signal `\rot.\middle[1]' from process `\rot.$proc$rot.v:0$2104'.
No latch inferred for signal `\rot.\middle[2]' from process `\rot.$proc$rot.v:0$2104'.
No latch inferred for signal `\rot.\middle[3]' from process `\rot.$proc$rot.v:0$2104'.
No latch inferred for signal `\rot.\middle[4]' from process `\rot.$proc$rot.v:0$2104'.
No latch inferred for signal `\rot.\middle[5]' from process `\rot.$proc$rot.v:0$2104'.
No latch inferred for signal `\rot.\middle[6]' from process `\rot.$proc$rot.v:0$2104'.
No latch inferred for signal `\rot.\middle[7]' from process `\rot.$proc$rot.v:0$2104'.

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `rot.$proc$rot.v:0$2104'.
Cleaned up 0 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage.
Optimizing module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage.
Optimizing module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage.
Optimizing module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage.
Optimizing module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage.
Optimizing module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage.
Optimizing module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage.
Optimizing module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage.
Optimizing module rot.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage.
Optimizing module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage.
Optimizing module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage.
Optimizing module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage.
Optimizing module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage.
Optimizing module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage.
Optimizing module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage.
Optimizing module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage.
Optimizing module rot.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage..
Finding unused cells or wires in module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage..
Finding unused cells or wires in module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage..
Finding unused cells or wires in module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage..
Finding unused cells or wires in module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage..
Finding unused cells or wires in module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage..
Finding unused cells or wires in module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage..
Finding unused cells or wires in module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage..
Finding unused cells or wires in module \rot..
Removed 0 unused cells and 2080 unused wires.
<suppressed ~10 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage...
Checking module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage...
Checking module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage...
Checking module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage...
Checking module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage...
Checking module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage...
Checking module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage...
Checking module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage...
Checking module rot...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage.
Optimizing module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage.
Optimizing module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage.
Optimizing module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage.
Optimizing module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage.
Optimizing module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage.
Optimizing module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage.
Optimizing module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage.
Optimizing module rot.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage'.
Finding identical cells in module `$paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage'.
Finding identical cells in module `$paramod$a4c137564271734846086b8aaca9819e42345e65\stage'.
Finding identical cells in module `$paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage'.
Finding identical cells in module `$paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage'.
Finding identical cells in module `$paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage'.
Finding identical cells in module `$paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage'.
Finding identical cells in module `$paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage'.
Finding identical cells in module `\rot'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rot..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~2048 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage.
  Optimizing cells in module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage.
  Optimizing cells in module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage.
  Optimizing cells in module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage.
  Optimizing cells in module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage.
  Optimizing cells in module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage.
  Optimizing cells in module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage.
  Optimizing cells in module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage.
  Optimizing cells in module \rot.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage'.
Finding identical cells in module `$paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage'.
Finding identical cells in module `$paramod$a4c137564271734846086b8aaca9819e42345e65\stage'.
Finding identical cells in module `$paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage'.
Finding identical cells in module `$paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage'.
Finding identical cells in module `$paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage'.
Finding identical cells in module `$paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage'.
Finding identical cells in module `$paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage'.
Finding identical cells in module `\rot'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage..
Finding unused cells or wires in module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage..
Finding unused cells or wires in module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage..
Finding unused cells or wires in module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage..
Finding unused cells or wires in module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage..
Finding unused cells or wires in module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage..
Finding unused cells or wires in module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage..
Finding unused cells or wires in module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage..
Finding unused cells or wires in module \rot..

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage.
Optimizing module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage.
Optimizing module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage.
Optimizing module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage.
Optimizing module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage.
Optimizing module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage.
Optimizing module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage.
Optimizing module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage.
Optimizing module rot.

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage..
Finding unused cells or wires in module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage..
Finding unused cells or wires in module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage..
Finding unused cells or wires in module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage..
Finding unused cells or wires in module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage..
Finding unused cells or wires in module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage..
Finding unused cells or wires in module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage..
Finding unused cells or wires in module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage..
Finding unused cells or wires in module \rot..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage.
Optimizing module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage.
Optimizing module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage.
Optimizing module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage.
Optimizing module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage.
Optimizing module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage.
Optimizing module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage.
Optimizing module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage.
Optimizing module rot.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage'.
Finding identical cells in module `$paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage'.
Finding identical cells in module `$paramod$a4c137564271734846086b8aaca9819e42345e65\stage'.
Finding identical cells in module `$paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage'.
Finding identical cells in module `$paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage'.
Finding identical cells in module `$paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage'.
Finding identical cells in module `$paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage'.
Finding identical cells in module `$paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage'.
Finding identical cells in module `\rot'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rot..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~2048 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage.
  Optimizing cells in module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage.
  Optimizing cells in module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage.
  Optimizing cells in module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage.
  Optimizing cells in module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage.
  Optimizing cells in module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage.
  Optimizing cells in module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage.
  Optimizing cells in module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage.
  Optimizing cells in module \rot.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage'.
Finding identical cells in module `$paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage'.
Finding identical cells in module `$paramod$a4c137564271734846086b8aaca9819e42345e65\stage'.
Finding identical cells in module `$paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage'.
Finding identical cells in module `$paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage'.
Finding identical cells in module `$paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage'.
Finding identical cells in module `$paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage'.
Finding identical cells in module `$paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage'.
Finding identical cells in module `\rot'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage..
Finding unused cells or wires in module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage..
Finding unused cells or wires in module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage..
Finding unused cells or wires in module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage..
Finding unused cells or wires in module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage..
Finding unused cells or wires in module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage..
Finding unused cells or wires in module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage..
Finding unused cells or wires in module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage..
Finding unused cells or wires in module \rot..

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage.
Optimizing module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage.
Optimizing module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage.
Optimizing module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage.
Optimizing module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage.
Optimizing module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage.
Optimizing module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage.
Optimizing module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage.
Optimizing module rot.

3.8.9. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage..
Finding unused cells or wires in module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage..
Finding unused cells or wires in module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage..
Finding unused cells or wires in module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage..
Finding unused cells or wires in module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage..
Finding unused cells or wires in module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage..
Finding unused cells or wires in module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage..
Finding unused cells or wires in module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage..
Finding unused cells or wires in module \rot..

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module rot:
  created 0 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage.
Optimizing module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage.
Optimizing module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage.
Optimizing module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage.
Optimizing module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage.
Optimizing module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage.
Optimizing module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage.
Optimizing module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage.
Optimizing module rot.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage'.
Finding identical cells in module `$paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage'.
Finding identical cells in module `$paramod$a4c137564271734846086b8aaca9819e42345e65\stage'.
Finding identical cells in module `$paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage'.
Finding identical cells in module `$paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage'.
Finding identical cells in module `$paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage'.
Finding identical cells in module `$paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage'.
Finding identical cells in module `$paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage'.
Finding identical cells in module `\rot'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rot..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~2048 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage.
  Optimizing cells in module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage.
  Optimizing cells in module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage.
  Optimizing cells in module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage.
  Optimizing cells in module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage.
  Optimizing cells in module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage.
  Optimizing cells in module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage.
  Optimizing cells in module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage.
  Optimizing cells in module \rot.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage'.
Finding identical cells in module `$paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage'.
Finding identical cells in module `$paramod$a4c137564271734846086b8aaca9819e42345e65\stage'.
Finding identical cells in module `$paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage'.
Finding identical cells in module `$paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage'.
Finding identical cells in module `$paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage'.
Finding identical cells in module `$paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage'.
Finding identical cells in module `$paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage'.
Finding identical cells in module `\rot'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage..
Finding unused cells or wires in module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage..
Finding unused cells or wires in module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage..
Finding unused cells or wires in module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage..
Finding unused cells or wires in module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage..
Finding unused cells or wires in module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage..
Finding unused cells or wires in module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage..
Finding unused cells or wires in module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage..
Finding unused cells or wires in module \rot..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage.
Optimizing module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage.
Optimizing module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage.
Optimizing module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage.
Optimizing module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage.
Optimizing module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage.
Optimizing module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage.
Optimizing module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage.
Optimizing module rot.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage..
Finding unused cells or wires in module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage..
Finding unused cells or wires in module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage..
Finding unused cells or wires in module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage..
Finding unused cells or wires in module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage..
Finding unused cells or wires in module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage..
Finding unused cells or wires in module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage..
Finding unused cells or wires in module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage..
Finding unused cells or wires in module \rot..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage..
Finding unused cells or wires in module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage..
Finding unused cells or wires in module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage..
Finding unused cells or wires in module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage..
Finding unused cells or wires in module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage..
Finding unused cells or wires in module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage..
Finding unused cells or wires in module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage..
Finding unused cells or wires in module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage..
Finding unused cells or wires in module \rot..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage..
Finding unused cells or wires in module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage..
Finding unused cells or wires in module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage..
Finding unused cells or wires in module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage..
Finding unused cells or wires in module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage..
Finding unused cells or wires in module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage..
Finding unused cells or wires in module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage..
Finding unused cells or wires in module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage..
Finding unused cells or wires in module \rot..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage.
Optimizing module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage.
Optimizing module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage.
Optimizing module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage.
Optimizing module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage.
Optimizing module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage.
Optimizing module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage.
Optimizing module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage.
Optimizing module rot.

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage'.
Finding identical cells in module `$paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage'.
Finding identical cells in module `$paramod$a4c137564271734846086b8aaca9819e42345e65\stage'.
Finding identical cells in module `$paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage'.
Finding identical cells in module `$paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage'.
Finding identical cells in module `$paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage'.
Finding identical cells in module `$paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage'.
Finding identical cells in module `$paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage'.
Finding identical cells in module `\rot'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage..
Finding unused cells or wires in module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage..
Finding unused cells or wires in module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage..
Finding unused cells or wires in module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage..
Finding unused cells or wires in module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage..
Finding unused cells or wires in module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage..
Finding unused cells or wires in module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage..
Finding unused cells or wires in module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage..
Finding unused cells or wires in module \rot..

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage.
Optimizing module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage.
Optimizing module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage.
Optimizing module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage.
Optimizing module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage.
Optimizing module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage.
Optimizing module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage.
Optimizing module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage.
Optimizing module rot.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage'.
Finding identical cells in module `$paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage'.
Finding identical cells in module `$paramod$a4c137564271734846086b8aaca9819e42345e65\stage'.
Finding identical cells in module `$paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage'.
Finding identical cells in module `$paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage'.
Finding identical cells in module `$paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage'.
Finding identical cells in module `$paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage'.
Finding identical cells in module `$paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage'.
Finding identical cells in module `\rot'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rot..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~2048 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage.
  Optimizing cells in module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage.
  Optimizing cells in module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage.
  Optimizing cells in module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage.
  Optimizing cells in module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage.
  Optimizing cells in module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage.
  Optimizing cells in module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage.
  Optimizing cells in module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage.
  Optimizing cells in module \rot.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage'.
Finding identical cells in module `$paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage'.
Finding identical cells in module `$paramod$a4c137564271734846086b8aaca9819e42345e65\stage'.
Finding identical cells in module `$paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage'.
Finding identical cells in module `$paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage'.
Finding identical cells in module `$paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage'.
Finding identical cells in module `$paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage'.
Finding identical cells in module `$paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage'.
Finding identical cells in module `\rot'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage..
Finding unused cells or wires in module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage..
Finding unused cells or wires in module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage..
Finding unused cells or wires in module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage..
Finding unused cells or wires in module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage..
Finding unused cells or wires in module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage..
Finding unused cells or wires in module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage..
Finding unused cells or wires in module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage..
Finding unused cells or wires in module \rot..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage.
Optimizing module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage.
Optimizing module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage.
Optimizing module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage.
Optimizing module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage.
Optimizing module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage.
Optimizing module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage.
Optimizing module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage.
Optimizing module rot.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~2121 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage.
Optimizing module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage.
Optimizing module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage.
Optimizing module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage.
Optimizing module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage.
Optimizing module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage.
Optimizing module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage.
Optimizing module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage.
Optimizing module rot.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage'.
Finding identical cells in module `$paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage'.
Finding identical cells in module `$paramod$a4c137564271734846086b8aaca9819e42345e65\stage'.
Finding identical cells in module `$paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage'.
Finding identical cells in module `$paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage'.
Finding identical cells in module `$paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage'.
Finding identical cells in module `$paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage'.
Finding identical cells in module `$paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage'.
Finding identical cells in module `\rot'.
Removed a total of 0 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage..
Finding unused cells or wires in module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage..
Finding unused cells or wires in module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage..
Finding unused cells or wires in module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage..
Finding unused cells or wires in module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage..
Finding unused cells or wires in module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage..
Finding unused cells or wires in module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage..
Finding unused cells or wires in module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage..
Finding unused cells or wires in module \rot..

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `$paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage' to `<abc-temp-dir>/input.blif'..
Extracted 256 gates and 513 wires to a netlist network with 257 inputs and 256 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      256
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:      257
ABC RESULTS:          output signals:      256
Removing temp directory.

3.22.2. Extracting gate netlist of module `$paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage' to `<abc-temp-dir>/input.blif'..
Extracted 256 gates and 513 wires to a netlist network with 257 inputs and 256 outputs.

3.22.2.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.2.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      256
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:      257
ABC RESULTS:          output signals:      256
Removing temp directory.

3.22.3. Extracting gate netlist of module `$paramod$a4c137564271734846086b8aaca9819e42345e65\stage' to `<abc-temp-dir>/input.blif'..
Extracted 256 gates and 513 wires to a netlist network with 257 inputs and 256 outputs.

3.22.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.3.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      256
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:      257
ABC RESULTS:          output signals:      256
Removing temp directory.

3.22.4. Extracting gate netlist of module `$paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage' to `<abc-temp-dir>/input.blif'..
Extracted 256 gates and 513 wires to a netlist network with 257 inputs and 256 outputs.

3.22.4.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.4.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      256
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:      257
ABC RESULTS:          output signals:      256
Removing temp directory.

3.22.5. Extracting gate netlist of module `$paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage' to `<abc-temp-dir>/input.blif'..
Extracted 256 gates and 513 wires to a netlist network with 257 inputs and 256 outputs.

3.22.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.5.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      256
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:      257
ABC RESULTS:          output signals:      256
Removing temp directory.

3.22.6. Extracting gate netlist of module `$paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage' to `<abc-temp-dir>/input.blif'..
Extracted 256 gates and 513 wires to a netlist network with 257 inputs and 256 outputs.

3.22.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.6.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      256
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:      257
ABC RESULTS:          output signals:      256
Removing temp directory.

3.22.7. Extracting gate netlist of module `$paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage' to `<abc-temp-dir>/input.blif'..
Extracted 256 gates and 513 wires to a netlist network with 257 inputs and 256 outputs.

3.22.7.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.7.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      256
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:      257
ABC RESULTS:          output signals:      256
Removing temp directory.

3.22.8. Extracting gate netlist of module `$paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage' to `<abc-temp-dir>/input.blif'..
Extracted 256 gates and 513 wires to a netlist network with 257 inputs and 256 outputs.

3.22.8.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.8.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:      256
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:      257
ABC RESULTS:          output signals:      256
Removing temp directory.

3.22.9. Extracting gate netlist of module `\rot' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage.
Optimizing module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage.
Optimizing module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage.
Optimizing module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage.
Optimizing module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage.
Optimizing module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage.
Optimizing module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage.
Optimizing module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage.
Optimizing module rot.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage'.
Finding identical cells in module `$paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage'.
Finding identical cells in module `$paramod$a4c137564271734846086b8aaca9819e42345e65\stage'.
Finding identical cells in module `$paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage'.
Finding identical cells in module `$paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage'.
Finding identical cells in module `$paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage'.
Finding identical cells in module `$paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage'.
Finding identical cells in module `$paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage'.
Finding identical cells in module `\rot'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage..
Finding unused cells or wires in module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage..
Finding unused cells or wires in module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage..
Finding unused cells or wires in module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage..
Finding unused cells or wires in module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage..
Finding unused cells or wires in module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage..
Finding unused cells or wires in module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage..
Finding unused cells or wires in module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage..
Finding unused cells or wires in module \rot..
Removed 0 unused cells and 4104 unused wires.
<suppressed ~8 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \rot
Used module:     $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage
Used module:     $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage
Used module:     $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage
Used module:     $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage
Used module:     $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage
Used module:     $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage
Used module:     $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage
Used module:     $paramod$a4c137564271734846086b8aaca9819e42345e65\stage

3.24.2. Analyzing design hierarchy..
Top module:  \rot
Used module:     $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage
Used module:     $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage
Used module:     $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage
Used module:     $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage
Used module:     $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage
Used module:     $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage
Used module:     $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage
Used module:     $paramod$a4c137564271734846086b8aaca9819e42345e65\stage
Removed 0 unused modules.

3.25. Printing statistics.

=== $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage ===

   Number of wires:                  3
   Number of wire bits:            513
   Number of public wires:           3
   Number of public wire bits:     513
   Number of ports:                  3
   Number of port bits:            513
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                256
     $_MUX_                        256

=== $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage ===

   Number of wires:                  3
   Number of wire bits:            513
   Number of public wires:           3
   Number of public wire bits:     513
   Number of ports:                  3
   Number of port bits:            513
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                256
     $_MUX_                        256

=== $paramod$a4c137564271734846086b8aaca9819e42345e65\stage ===

   Number of wires:                  3
   Number of wire bits:            513
   Number of public wires:           3
   Number of public wire bits:     513
   Number of ports:                  3
   Number of port bits:            513
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                256
     $_MUX_                        256

=== $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage ===

   Number of wires:                  3
   Number of wire bits:            513
   Number of public wires:           3
   Number of public wire bits:     513
   Number of ports:                  3
   Number of port bits:            513
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                256
     $_MUX_                        256

=== $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage ===

   Number of wires:                  3
   Number of wire bits:            513
   Number of public wires:           3
   Number of public wire bits:     513
   Number of ports:                  3
   Number of port bits:            513
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                256
     $_MUX_                        256

=== $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage ===

   Number of wires:                  3
   Number of wire bits:            513
   Number of public wires:           3
   Number of public wire bits:     513
   Number of ports:                  3
   Number of port bits:            513
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                256
     $_MUX_                        256

=== $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage ===

   Number of wires:                  3
   Number of wire bits:            513
   Number of public wires:           3
   Number of public wire bits:     513
   Number of ports:                  3
   Number of port bits:            513
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                256
     $_MUX_                        256

=== $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage ===

   Number of wires:                  3
   Number of wire bits:            513
   Number of public wires:           3
   Number of public wire bits:     513
   Number of ports:                  3
   Number of port bits:            513
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                256
     $_MUX_                        256

=== rot ===

   Number of wires:                 11
   Number of wire bits:           2568
   Number of public wires:          11
   Number of public wire bits:    2568
   Number of ports:                  3
   Number of port bits:            520
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage      1
     $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage      1
     $paramod$a4c137564271734846086b8aaca9819e42345e65\stage      1
     $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage      1
     $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage      1
     $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage      1
     $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage      1
     $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage      1

=== design hierarchy ===

   rot                               1
     $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage      1
     $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage      1
     $paramod$a4c137564271734846086b8aaca9819e42345e65\stage      1
     $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage      1
     $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage      1
     $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage      1
     $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage      1
     $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage      1

   Number of wires:                 35
   Number of wire bits:           6672
   Number of public wires:          35
   Number of public wire bits:    6672
   Number of ports:                 27
   Number of port bits:           4624
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2048
     $_MUX_                       2048

3.26. Executing CHECK pass (checking for obvious problems).
Checking module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage...
Checking module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage...
Checking module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage...
Checking module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage...
Checking module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage...
Checking module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage...
Checking module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage...
Checking module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage...
Checking module rot...
Found and reported 0 problems.

4. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod$4e210b63a519ab8109a26bbd5ec3ec2dc3828ea2\stage.
Deleting now unused module $paramod$952ccd1c86859d3d41b32c68f62c61de1c5771d2\stage.
Deleting now unused module $paramod$a4c137564271734846086b8aaca9819e42345e65\stage.
Deleting now unused module $paramod$b550f552b4c46e2b14f40f93d1d3444ac3c3977b\stage.
Deleting now unused module $paramod$bd50d441cbd5557110b9447aff4a32620cbcb765\stage.
Deleting now unused module $paramod$bf0c3692de18da1540c3f8bc835b3bca0021af27\stage.
Deleting now unused module $paramod$ca2848947bc36b85c0c22704c5d527f2852b8a48\stage.
Deleting now unused module $paramod$f6bc32146ea965acc510414724fcad54c9ac4922\stage.
<suppressed ~8 debug messages>

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \rot

5.2. Analyzing design hierarchy..
Top module:  \rot
Removed 0 unused modules.

6. Executing MEMORY pass.

6.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

6.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

6.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

6.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

6.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

6.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rot..

6.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

6.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

6.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rot..

6.10. Executing MEMORY_COLLECT pass (generating $mem cells).

6.11. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

7. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell dff_x1 (noninv, pins=3, area=0.00) is a direct match for cell type $_DFF_P_.
  cell dffnr_x1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PN0_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \dff_x1 _DFF_P_ (.clk( C), .i( D), .q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \dffnr_x1 _DFF_PN0_ (.clk( C), .i( D), .nrst( R), .q( Q));
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

7.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\rot':

8. Executing ABC pass (technology mapping using ABC).

8.1. Extracting gate netlist of module `\rot' to `<abc-temp-dir>/input.blif'..
Extracted 2048 gates and 2312 wires to a netlist network with 264 inputs and 256 outputs.

8.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/ahmed/coriolis-2.x/release/install/lib/python3/dist-packages/pdks/ihpsg13g2_c4m/libs.ref/StdCellLib/liberty/StdCellLib_nom.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped cell "fill" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "tie" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "tie_diff" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "tie_poly" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fill_w2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "tie_w2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "tie_diff_w2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "tie_poly_w2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fill_w4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "tie_w4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "tie_diff_w4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "tie_poly_w4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "diode_w1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "decap_w0" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "nsnrlatch_x0" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "nsnrlatch_x1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "dff_x1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "dffnr_x1".
ABC: Library "StdCellLib_nom" from "/home/ahmed/coriolis-2.x/release/install/lib/python3/dist-packages/pdks/ihpsg13g2_c4m/libs.ref/StdCellLib/liberty/StdCellLib_nom.lib" has 35 cells (18 skipped: 2 seq; 0 tri-state; 16 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.55 MB. Time =     0.00 sec
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.1.2. Re-integrating ABC results.
ABC RESULTS:            inv_x0 cells:        7
ABC RESULTS:           mux2_x1 cells:     2048
ABC RESULTS:        internal signals:     1792
ABC RESULTS:           input signals:      264
ABC RESULTS:          output signals:      256
Removing temp directory.

9. Printing statistics.

=== rot ===

   Number of wires:               2354
   Number of wire bits:           8991
   Number of public wires:          35
   Number of public wire bits:    6672
   Number of ports:                  3
   Number of port bits:            520
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2063
     $scopeinfo                      8
     inv_x0                          7
     mux2_x1                      2048

Removed 0 unused cells and 541 unused wires.

10. Executing BLIF backend.

End of script. Logfile hash: 13ffcd5fb3, CPU: user 0.91s system 0.03s, MEM: 303.84 MB peak
Yosys 0.46 (git sha1 0.46, g++ 11.2.0-19ubuntu1 -fPIC -O3)
Time spent: 48% 2x abc (0 sec), 11% 15x opt_clean (0 sec), ...
     + rot [blif]
        + rot [.model]
     + rot [blif]
        + rot [.model]
  o  Configuration contents (CfgCache):
     - misc.catchCore = False
     - misc.minTraceLevel = 12300
     - misc.maxTraceLevel = 12400
     - misc.info = False
     - misc.paranoid = False
     - misc.bug = False
     - misc.logMode = True
     - misc.verboseLevel1 = True
     - misc.verboseLevel2 = True
  o  Configuration contents (CfgCache):
     - gdsDriver.metricDbu = 1e-09
     - gdsDriver.dbuPerUu = 0.001
  o  Configuration contents (CfgCache):
     - lefImport.minTerminalWidth = 0.0
     - crlcore.groundName = "vss"
     - crlcore.powerName = "vdd"
     - etesian.aspectRatio = 1.0 [10:1000]
     - etesian.spaceMargin = 0.1
     - etesian.uniformDensity = True
     - etesian.densityVariation = 0.05
     - etesian.routingDriven = False
     - etesian.latchUpDistance = 580000
     - etesian.diodeName = "diode_w1"
     - etesian.antennaInsertThreshold = 0.5
     - etesian.tieName = None
     - etesian.antennaGateMaxWL = 10000000
     - etesian.antennaDiodeMaxWL = 1000000000
     - etesian.feedNames = "tie,decap_w0"
     - etesian.defaultFeed = "tie"
     - etesian.cell.zero = "zero_x1"
     - etesian.cell.one = "one_x1"
     - etesian.bloat = "disabled"
     - etesian.effort = 2 (1:"Fast", 2:"Standard", 3:"High", 4:"Extreme")
     - etesian.graphics = 2 (1:"Show every step", 2:"Show lower bound", 3:"Show result only")
     - anabatic.routingGauge = "StdCellLib"
     - anabatic.globalLengthThreshold = 1450
     - anabatic.saturateRatio = 0.9
     - anabatic.saturateRp = 10
     - anabatic.topRoutingLayer = "TopMetal1"
     - anabatic.edgeLength = 24
     - anabatic.edgeWidth = 4
     - anabatic.edgeCostH = 9.0
     - anabatic.edgeCostK = -10.0
     - anabatic.edgeHInc = 1.0
     - anabatic.edgeHScaling = 1.0
     - anabatic.globalIterations = 20 [1:100]
     - anabatic.gcell.displayMode = 1 (1:"Boundary", 2:"Density")
     - anabatic.searchHalo = 2
     - katana.trackFill = 0
     - katana.runRealignStage = True
     - katana.hTracksReservedMin = 4
     - katana.hTracksReservedLocal = 20 [0:30]
     - katana.vTracksReservedMin = 4
     - katana.vTracksReservedLocal = 20 [0:30]
     - katana.termSatReservedLocal = 8
     - katana.termSatThreshold = 9
     - katana.eventsLimit = 4000002
     - katana.ripupCost = 3 [0:None]
     - katana.strapRipupLimit = 16 [1:None]
     - katana.localRipupLimit = 9 [1:None]
     - katana.globalRipupLimit = 5 [1:None]
     - katana.longGlobalRipupLimit = 5
     - chip.padCoreSide = "South"
  o  Configuration contents (CfgCache):
     - viewer.minimumSize = 500
     - viewer.pixelThreshold = 10
     - chip.block.rails.count = 5
     - chip.block.rails.hWidth = 53600
     - chip.block.rails.vWidth = 53600
     - chip.block.rails.hSpacing = 14000
     - chip.block.rails.vSpacing = 14000
     - chip.supplyRailWidth = 400000
     - chip.supplyRailPitch = 800000
     - clockTree.placerEngine = "Etesian"
     - block.spareSide = 921600
     - spares.buffer = "buf_x4"
     - spares.hfnsBuffer = "buf_x4"
     - spares.maxSinks = 31
  o  Configuration contents (CfgCache):
     - chip.block.rails.count = 2
     - chip.block.rails.hWidth = 800000
     - chip.block.rails.vWidth = 800000
     - chip.block.rails.hSpacing = 120000
     - chip.block.rails.vSpacing = 120000
     - chip.padCoreSide = "North"
  o  Setup IHP sg13g2 I/O library in iolib.
     - Shifting sg13g2_Corner bottom left corner AB to (0,0).
  o  Configuration contents (CfgCache):
     - etesian.graphics = 3
     - etesian.spaceMargin = 0.1
     - katana.eventsLimit = 4000000
  o  Preload standard plugins.
     - "coriolis.plugins.chip" (module)
     - "coriolis.plugins.harness" (module)
     - "coriolis.plugins.sram" (module)
     - "coriolis.plugins.core2chip" (module)
     - "coriolis.plugins.macro" (module)
     - "coriolis.plugins.aboutwindow.py"
     - "coriolis.plugins.checks.py"
     - "coriolis.plugins.conductor.py"
     - "coriolis.plugins.matrixplacer.py"
     - "coriolis.plugins.rsave.py"
     - "coriolis.plugins.rsaveall.py"
     - "coriolis.plugins.runDemo.py"
     - "coriolis.plugins.s2r.py"
     - "coriolis.plugins.stats.py"
     - "coriolis.plugins.utils.py"
     - No NDA protected plugins.
[WARNING] timing.staticInit(): Library do not provides "inv_x8", skipped.
[WARNING] timing.staticInit(): Library do not provides "buf_x8", skipped.
.  clean_flow
.  yosys
.  b2v
.  gds
TaskError - taskid:gds
PythonAction Error
Traceback (most recent call last):
  File "/usr/lib/python3/dist-packages/doit/action.py", line 424, in execute
    returned_value = self.py_callable(*self.args, **kwargs)
  File "/home/ahmed/coriolis-2.x/release/install/lib/python3/dist-packages/coriolis/designflow/pnr.py", line 78, in doTask
    rv = self.script( **kw )
  File "/home/ahmed/circuits/experiments/rot_n10/doDesign.py", line 64, in scriptMain
    dico = get_signals_hurricane(CoreName)
  File "/home/ahmed/circuits/experiments/rot_n10/doDesign.py", line 29, in get_signals_hurricane
    cell_blif  = CRL.Blif.load(f'{entity}.blif')
hurricane.HurricaneError: 
[ERROR] Instance::Instance(): Can't create Instance subckt_0_inv_x0, already exists in <id:966957 Cell rot>

########################################
TaskError - taskid:gds
gds <stderr>:

gds <stdout>:
PnR.doTask() on "rot_cts_r.gds"

